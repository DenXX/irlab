package edu.emory.mathcs.clir.relextract.data;

option java_generate_equals_and_hash = true;

option java_package = "edu.emory.mathcs.clir.relextract.data";

option java_outer_classname = "Document";

message NlpDocument {
    required string text = 1; // Original document text.
    optional string docId = 2; // Document identifier.
    repeated Token token = 3; // All document tokens.
    repeated Sentence sentence = 4; // The list of all sentences.
    repeated Span span = 5; // List of entity/measure mentioned in this document.
    repeated Attribute attribute = 6;
    repeated Relation relation = 7;

    // For Q&A documents.
    optional uint32 questionLength = 100;
    optional uint32 answerLength = 101;
    repeated uint32 partsCharOffset = 102;
    repeated uint32 partsType = 103;

    extensions 10000 to max;
}

// A key-value pair, that can store any meta-information about the document.
message Attribute {
    required string key = 1;
    required string value = 2;
}

message DependencyEdge {
    required int32 source = 1;
    required int32 target = 2;
    required string label = 3;
}

message Sentence {
    // Indexes of the first and last token in the sentence.
    required int32 firstToken = 1;
    required int32 lastToken = 2;
    optional string text = 3;
    optional uint32 dependencyRootToken = 4;
    optional string dependencyTree = 5;
    repeated DependencyEdge dependencyEdge = 6;

    extensions 10000 to max;
}

message Token {
    required uint32 beginCharOffset = 1;
    required uint32 endCharOffset = 2;
    optional string text = 3;
    optional string originalText = 4;
    optional string lemma = 5;
    optional uint32 sentenceIndex = 6;
    optional string pos = 7;
    optional string ner = 8;
    optional string normalizedNer = 9;
    optional string whitespaceBefore = 10;
    optional string whitespaceAfter = 11;
    optional uint32 dependencyGovernor = 12;
    optional string dependencyType = 13;
    optional uint32 dependencyTreeNodeDepth = 14;

    extensions 10000 to max;
}

message Mention {
    // Index of the first and next to the last tokens of the mention.
    required uint32 tokenBeginOffset = 1;
    required uint32 tokenEndOffset = 2;
    optional uint32 sentenceIndex = 3;
    required string text = 4;
    optional string value = 5; // Canonicalized value of the token.
    optional string type = 6; // Span type: entity, number, date, etc.
    optional string entityId = 7;
    optional string mentionType = 8;
    optional string number = 9; // singular, plural
    optional string gender = 10; // Gender of the mentioned entity.
    optional string animacy = 11; // Animacy of the mentioned entity.
    repeated string candidateEntityId = 12; // entityId should always be 0th
    repeated double candidateEntityScore = 13;

    extensions 10000 to max;
}

message Span {
    optional string text = 1;
    optional string value = 2;
    optional string type = 3;
    optional string nerType = 4;
    optional string entityId = 5;
    repeated Mention mention = 6;
    // Index of the representative mention for this cluster.
    optional uint32 representativeMention = 7;
    repeated string candidateEntityId = 8;
    repeated double candidateEntityScore = 9;

    extensions 10000 to max;
}

message Relation {
    required uint32 subjectSpan = 1;
    required uint32 objectSpan = 2;
    optional string relation = 3;
    optional uint32 subjectSpanCandidateEntityIdIndex = 4;
    optional uint32 objectSpanCandidateEntityIdIndex = 5;
}